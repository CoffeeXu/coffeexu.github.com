<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[所以。]]></title>
  <link href="http://CoffeeXu.github.io/atom.xml" rel="self"/>
  <link href="http://CoffeeXu.github.io/"/>
  <updated>2013-12-01T18:26:45+08:00</updated>
  <id>http://CoffeeXu.github.io/</id>
  <author>
    <name><![CDATA[许嘘嘘]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[如果再重来，会不会稍显狼狈]]></title>
    <link href="http://CoffeeXu.github.io/blog/2013/11/20/goodbye"/>
    <updated>2013-11-20T21:38:00+08:00</updated>
    <id>http://CoffeeXu.github.io/blog/2013/11/20/goodbye</id>
    <content type="html"><![CDATA[<p>数了数，花花跟我一起才一个月而已。<br>
猫的记忆力不是很好，而她现在也才四个月大而已，所以她以后漫长的岁月里大概都不会记得我，可是我可能记得她。</p>

<p>我很喜欢很喜欢猫，很想要拥有一只自己的猫，将它从小带到大，我们会有感情。我们相互依赖，却也相互独立。所以我想方设法领养了花花，纵使那么多人说她难看，我还是想给她一个新家，也是想要满足自己的私欲。<br>
它来之后我才发现不是这样的。可能是太小的缘故，它非常闹腾，对一切都充满了好奇；又不爱干净，总是往脏的地方去，也很少看它收拾自己。我看到它的时候，它永远都是在上窜下跳。<br>
它让我越来越烦躁。</p>

<p>我喜欢猫，是因为它安静干净，花花显然不满足任何一点。我总是想说，等它长大了就好了，就会像别的猫一样，优雅高贵，藐视众生，偶尔又智商低下，犯傻犯贱。可是它事儿逼的精神，显然比我等它长大变成我印象中的猫的耐心强悍得多。<br>
我本来以为我会有很多时间跟它一起享受阳光，消磨时间；养了花花之后，我发现自己还是喜欢往外跑。它没来的时候，我就没在房间度过几个周末。我以为我会为了它改变，事实上我还是每个周末都忙东忙西，然后我才发现，也许我根本没办法空下来照顾它，而且它还让我需要花费更多的时间来收拾。<br>
它成了我的累赘。</p>

<p>我还是喜欢猫，我看到猫的时候可能还会想起花花，但是我可能不会再养猫。<br>
它吐舌头的时候还是很萌，逗它玩的时候还是很傻冒，叫它花花它已经会转过头来看我，抱着它的时候会一直舔我，还有时候伸过来的爪子是温柔的，吃东西的时候很乖，喝水的时候很乖，大便每次还是拉对地方，小便我是不知道它占据了几个点。</p>

<p>我以后可能会养植物，会养别的不费劲的小动物，但我可能不会再养猫。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[周！杰！伦！]]></title>
    <link href="http://CoffeeXu.github.io/blog/2013/11/17/jay-zhou"/>
    <updated>2013-11-17T19:17:00+08:00</updated>
    <id>http://CoffeeXu.github.io/blog/2013/11/17/jay-zhou</id>
    <content type="html"><![CDATA[<p>tags: <code>梦想清单</code></p>

<br>


<p>昨天杰伦演唱会。</p>

<p>跟<code>佳Y</code>会合之前，她们就已经在黄龙逛了一圈，一到就拿出两个杰伦的胸章叫我赶快带上。<br>「衣服戳破心疼不的？」<br>「不心疼不心疼，几块钱的衣服心疼毛线，哈哈」</p>

<p><img src="http://CoffeeXu.github.io/images/blog/20131117.jpg"></p>

<p>2点半拿到票之后，我们才安心去吃了今天的第一餐。炒辣鸡、泡菜饼、烤肉、墨鱼卷、牛肉石锅拌饭，安慰我们等了大半天饿坏的肚子。不过韩国料理没吃一半就觉得腻腻的，好在我们也比较饿，但吃到七分还是腻到受不了，说是要去鲜芋仙解腻，因为太远了，我们又赶着四点拍合照，只好作罢，买了点水果又返回了黄龙。</p>

<p>吃完回来，黄龙里面就在彩排了，我们的考试马上就要开始了！其实这个「马上」，估计也有三四个小时。但好像隐隐约约听到里面杰伦在唱，激动得上蹿下跳。天气已经有了晚上的些些凉意，我半个小时内换上大棉袄和大围巾，过了一会儿又带上了手套，小伙伴们投来了诧异的目光。</p>

<p>至于说合拍照的那伙人，已经不见了。其实也就是官网自行组织的粉丝合照，每个喜欢杰伦的人都有自己的故事，我不怎么关心别人的故事。我倒是有些惋惜芋圆，进场了还说要叫外卖。</p>

<p>这个时候，我们又加入了一位没有票的小伙伴，所以，我们逛的时候还要留意下黄牛。我们买了荧光棒、贴纸，天色已经黑了，心情也是越来越激动，疯疯癫癫的已经不在地球上了。黄牛票已经是接近检票进场的时候我们才去问。<br>其实也不用问，周边有很多人都会主动问要不要票只要我们会一句，他们就非常热情地开始商讨。我们就站在大门口，真假票检验处。就在我们商讨怎么办的时候，边上一位路人非常气愤又伤心又无助地电话她远方的朋友，说买到了假票。价值580，她是多少买的我们也不知道，只能默默为她难过。最后那位小伙伴还是进场了，400买了一张工作人员票。黄牛这一行真是狗得很，票价贴掉，进场才知道原来是180的票，跟杰伦就在两头，感受气氛来了？不过既然说是小伙伴，还是想办法把她领到了我们的场次。位置是没有，站在最后。</p>

<p>坐在场子里，我一点都没有意识到时间还早的很，我只知道也许杰伦就在舞台的后面，等着上来跟歌迷见面。发了朋友圈，别人一提醒才发现，妈蛋还有差不多2个小时！不过我们的小伙伴安顿好，也差不多7点了吧。
灯光暗下来了，不准时的杰伦终于要出现了。很好笑的是，灯光暗下来，大屏幕上还是在放着广告，广告啊，大家不可遏制地在尖叫，一有人尖叫，全场就跟中毒一样也尖叫。广告啊真的只是广告啊！好吧，我也跟着人群发神经，不要说人家。</p>

<p>全场粉色的荧光棒真的好美。杰伦玫红色的话筒真的好亮骚。</p>

<br>


<p>第一首慢歌《最后的战役》，那么美好动听的旋律像时光隧道里令人晕眩的彩色光环，我唱着唱着，眼泪流了出来。</p>

<p>我觉得自己流眼泪是因为我想起这首歌的MV，战争中遇难的好友和「我」依依惜别的情景。我想起在Y家看的这个MV，我们还在她家喝红酒喝到脸热热的头晕晕的，不知道是不是夏天午后恼人的太阳晒的。那种感觉后来我总是在闷热的夏天感觉到，红晕和热量从脸颊蔓延到耳朵根，头脑也是热热的，说话和心跳总是很快，总是伴随着羊癫风般的手舞足蹈以及让我心动的男孩子在周围。不知道从哪个夏天起就没有了。我当时暗暗责怪自己的酒量怎么能这么弱呢，后来才知道那瓶红酒大约是有40来度。到后来我也知道，我的酒量真的也是不怎么好，它跟着青春期一样慢慢淡出了。</p>

<p>我越想眼泪流得越凶，我觉得自己的声音已经有点哽咽，便从回忆中抽回到现场。我觉得不行，我一定要打电话给另一半，告诉他此刻的我是多么多么多么地兴奋。我一下感觉更加难过了，因为我没有另一半。我想了想还是抽了张湿巾，擦了擦从十几年前流出的眼泪。此时此刻，我还是满足的。</p>

<p>我想，追随着杰伦的那个我，还是13年前的我，是从来不曾老去的我，是哭是哭笑是笑的我，是「勇敢的少年」的我；而你，是盗版卡带里的周杰伦，是正版卡带里的周杰伦，是cd里的周杰伦，是mp3里的周杰伦，是很少听的文件夹里的周杰伦，是电影里的周杰伦，是偶尔出现在康熙的周杰伦，是眼前说着「谢谢你」的周杰伦，是我的时光机的周杰伦。</p>

<p>「想象我们在西湖，在同一条游船上」</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[外婆]]></title>
    <link href="http://CoffeeXu.github.io/blog/2013/11/12/grandmother"/>
    <updated>2013-11-12T20:03:00+08:00</updated>
    <id>http://CoffeeXu.github.io/blog/2013/11/12/grandmother</id>
    <content type="html"><![CDATA[<p>星期天去邵逸夫看外婆，住院第二天。<br>第二次来邵逸夫，上一次也是外婆住院，家里人一起来探望。这次我一个人，门口买了点水果，冒着点零星的小雨，走进来发现也许跟几年前住的是同一幢楼。上一次是夏天，记得整幢楼都开了空调，当时觉得好高级，真是一家有钱的医院整幢楼打空调；而现在楼层看起来已经有些老旧了，俗话说「物是人非」，而今房子都老了，人呢？</p>

<p>外婆住走廊第一间，进门第一张床，隔壁躺着三个老头儿。外婆穿着病号服，立着一条腿，另一条受伤的腿就平放着，窝在白色的被子的，床头缠着监控器的各种线，食指上夹着一盏灯，感受她老迈的心跳脉搏，闪闪得把指数打在屏幕上。我时不时瞄两眼，看起来还是正常的。<br>我妈接过我买的橙子，放到柜子里，里面还有一床棉被。完了她坐在一旁的椅子上，椅子可以展开，是一张床，晚上我妈就睡上面，一晚上只要2块钱。护士会来统计病房里多少家属需要。<br>进门外婆就招呼我坐，埋怨我不要买东西，人来就好了。招呼我吃上一波亲人探望留下的枣子。叫我妈赶快去洗给我吃。</p>

<p>我小学六年级，我那个敦厚老实的外公就去世了。后来外婆遇到了现在的外公，也是老伴走了，两个人相互凑个伴，过下半辈子，这么一来也十多年了。外公是文化人，每个月离休工资差不多是我工资的两倍，上医院也不花钱，家里的药箱也从来都是满的。两个人老了，病痛什么的也渐渐地多了，三天两头住院。外婆的脚骨折过，所以越是老，反反复复疼痛复发地越是频繁。大半个月前刚抢救回来；这次又是半夜拨了邵逸夫的急救电话，救护车从杭州开到千岛湖接她。在钱方面，她自豪骄傲没给儿女增加负担，但是毕竟是老了，还是需要人照顾。外婆膝下三个女儿，一个儿子；我舅最小，这5年是从来没见过他，大姨大概我这个年纪就意外走了，小姨在南京跟着姨夫在工地上忙活，连亲戚的亲戚喝喜酒也是叫我哥代替去的。但她也不是那么没良心，上一次外婆非常严重，也还是立马赶回来。我妈最大，在农村里干活，算是自由的，所以照顾外婆的事情每每都是落到她身上。<br>我觉得外婆年轻的时候，看起来也是颇有泼妇的霸气。但我还没有看到过她跟人吵架，她说话一直就像是在教训人。不是尖酸刻薄，而是非常强势绝决果断，我妈就斯文随和得多，是读书人的感觉，但她们都不是慈祥的母亲，而且她们都是独立的拥有自我的，她们并不依赖男人，她们总是尽最大的努力做好自己的事情。</p>

<p>自从毕业以后，每次见到外婆，都叮嘱我好赶紧找男朋友了。她的标准是「老实，不滑头，工作要好」，她说疼人要疼在心里，表面上还是要严肃管教。<br>她大概周一周二做手术，三天后就可以回家了。送的任务应该会交给我老爸。外公在千岛湖也是住院着，中秋回去看他，觉得憔悴了很多。两个人都快八九十岁了吧，希望少受一些病痛的折磨，多一些平淡的日子，有了没了的心愿都可以实现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我本来想说一个故事]]></title>
    <link href="http://CoffeeXu.github.io/blog/2013/11/06/its-a-story"/>
    <updated>2013-11-06T20:55:00+08:00</updated>
    <id>http://CoffeeXu.github.io/blog/2013/11/06/its-a-story</id>
    <content type="html"><![CDATA[<p>000</p>

<p>我会保持更新，每周一篇。不让博客断掉。</p>

<p>而且，到目前为止，博客已经上好了所有的链接，它是一个完整的存在。</p>

<p>不过，即使它是完整的，也只是一部分的真相。</p>

<p>我前前后后用过网易博客，新浪博客，网易loft，到现在这个。每一次我都认为自己会坚持用下去，最后，它们都变成数据库里一串没有意义的代码。</p>

<br>


<p>001</p>

<p>还有十天，就要去梦寐以求的杰伦演唱会了。</p>

<p>今天起就要开始温习杰伦所有的歌曲，时间好像要重新轮回一次。</p>

<p>如果可以，请把我带回小时候。</p>

<p>说起来，我从来没有想过我可以去到他的演唱会。已经说不好这是一种回忆，还是一种终结。我每次想到，都觉得我大概会在演唱会上热泪眼眶。</p>

<p>本来演唱会那个周末，应该要回家看中医复查的。我就跟老妈说回不去了，我跟同学约了出去玩，我没有跟她说是演唱会。我觉得她肯定会觉得我乱花钱。她又开始碎碎念，说家里造房子正是用钱的时候，我还跑来跑去玩。说我不懂事。可惜我现在又没有花家里的钱了，我是自由的，所以我是不会被约束的，我想去哪里我自己花钱去，我想要什么东西我自己花钱买。乱花钱还是什么，这种都由我自己定义的，因为都是我自己的钱。走的时候我还是留了500。我还是尽量每次回来都会留下一些，造房子的钱我是给不起。</p>

<p>其实很多事情我都瞒着家里，上次去北京，我也是说和同学一起去的。他们不知道我其实一个人跑出去。我觉得自己已经可以为自己负责任了。我只是不想有太多麻烦，我想做什么我自己都清楚。我觉得意外和死亡，都是注定好的。逃不掉，躲不了。</p>

<br>


<p>002</p>

<p>回杭州的路上，前面坐着一对小夫妻，带着一个婴儿。一路上婴儿都在哭闹，影响了一车乘客。小夫妻也是觉得很不好意思，男的就一直满足着婴儿各种需求，希望他满足了之后就不会吵闹。女的没有办法，但还是抱怨说「这么宠溺不好，什么都让着他」。男的说「那不然能怎么办」。女的开始抱怨说「本来小孩要睡觉的，你家里哄哄哄那么吵，到车站了又哄哄哄那么吵，搞的小孩睡不着。」到最后，小夫妻也要吵了起来。</p>

<p>边上一对小情侣，大概也是小孩吵到睡不着，吃着橘子也要把坐车气发泄给对方。</p>

<p>到杭州坐193，车上有一群辩论赛刚结束的大学生，在叽叽喳喳讨论刚才辩论赛上彼此的表现。然后一个美女就忍不住骂道“吵得我头都痛死了！什么辩论赛，我看是卖菜比赛，啾啾啾啾，烦不烦”。不知道那群人是没听到，还是无所顾忌，依然热烈地讨论，美女骂了两三次，辩论赛依然如火如荼地展开着。</p>

<p>我们总是要压抑自己的不舒服，才能不给别人带去不舒服。要知道每个人有自有意识的成年人，都是有这样的觉悟。
但是好像总会在亲密的人面前，失去这种自制力。</p>

<br>


<p>003</p>

<p>我的闹钟总是在4:48分响起，我都按掉继续睡，甚至醒来都不知道我按掉过闹钟。</p>

<br>


<p>004</p>

<p>自由的代价是孤独。</p>

<p>我对自由的概念，是天空很高很蓝，可以有云，视野非常开阔，远处的山青翠地也仿佛在眼前，有种近视眼得救的错觉。我大概小学就近视眼了，从此我与清晰的世界就永远有着隔阂。后来我知道，世界干净还是污浊，跟眼镜片真没多大关系。</p>

<p>大学毕业的时候，我看到了自由。我忍不住又爆了粗口“我艹，老子读了十几年的书终于特么的解脱了。老子特么终于可以不用再读书了！老子特么终于可以想做什么就做什么了！”</p>

<p>分手的时候，我安慰自己说，我自由了。至少再也不用操心另外一个人，考虑另外一人的感受。我可以想去哪里去哪里，想做什么做什么，没有人管。</p>

<p>去上海的时候，我觉得自己是自由的；去北京的时候，我是自由的。</p>

<p>我跟前男友说，“我喜欢自由，我希望自己以后都是自由的”，他回了什么我已经忘记了。</p>

<p>自由，其实都是相对的。</p>

<p>我太明白想要得到什么一定要付出。所以我总是把功课搞定，把成绩搞定，爸妈才不会啰里八嗦，去阻止我青春期所有动荡的的欲望。但我并不是那种任性的熊孩子，我的犟脾气体现在奇怪的时候。比如因为觉得老妈的碎碎念很烦，就离家出走。大晚上的在大街上过了一夜。代价是裸露的脚踝都是蚊子包。犟脾气上来的时候，我才知道自己平常没有办法坚持下去的劲头，都在赌气的时候用完了。</p>

<p>看看我们，用自由换取课堂上汲取的知识，后来我们识字会认方向会坐车，我们可以自由地出走；用自由一天工作8，9小时每周工作5天换一点工资，后来我们才有钱去自由地消费。</p>

<p>总是要压抑自己，去做很多自己不喜欢的事情，来换得我们真正想要的相对的自由。</p>

<br>


<p>005</p>

<p>起因是在朋友圈看到LU酱的婚纱照，想起很多小时候的事情。我特么不写点东西，估计以后午睡都睡不着了！午睡睡着的时间大概只有五分钟，或者是一首歌的时间，醒来都满足地跟穿越了一个世纪一样。可是睡着之前的胡思乱想有时候就霸占了这仅有的五分钟。</p>

<p>LU酱的婚纱看得我真是想哭，没想到已经到了要嫁人的年纪了。明明有些照片看到的还是小学认识她的时候的样子，却是穿着婚纱。</p>

<p>每次回千岛湖，我都害怕看到十几岁的我和十几岁的小伙伴在路边玩耍。</p>

<p>过去发生的每件事情，就算是忘记了，它在人身上引起的改变都不会消失，为什么还要奢求更多？</p>

<br>


<p>006</p>

<p>每个人都在努力地向前走。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[讲一讲CSS的position/float/display]]></title>
    <link href="http://CoffeeXu.github.io/blog/2013/10/30/css-position-float-display"/>
    <updated>2013-10-30T21:51:00+08:00</updated>
    <id>http://CoffeeXu.github.io/blog/2013/10/30/css-position-float-display</id>
    <content type="html"><![CDATA[<p>tags: <code>CSS</code> <code>position</code> <code>float</code> <code>display</code></p>

<br>


<h3>position</h3>

<ol>
<li><p>position属性取值：static(默认)、relative、absolute、fixed、inherit。</p></li>
<li><p>postision：static；始终处于文档流给予的位置。看起来好像没有用，但它可以快速取消定位，让top，right，bottom，left的值失效。在切换的时候可以尝试这个方法。</p></li>
<li>除了static值，在其他三个值的设置下，z-index才会起作用。（确切地说z-index只在定位元素上有效）</li>
<li>position：relative和absolute都可以用于定位，区别在于前者的div还属于正常的文档流，后者已经是脱离了正常文档流，不占据空间位置，不会将父类撑开。定位原点relative是相对于它在正常流中的默认位置偏移，它原本占据的空间任然保留；absolute相对于第一个position属性值不为static的父类。所以设置了position：absolute，其父类的该属性值要注意，而且overflow：hidden也不能乱设置，因为不属于正常文档流，不会占据父类的高度，也就不会有滚动条。</li>
<li>fixed旧版本IE不支持，却是很有用，定位原点相对于浏览器窗口，而且不能变。常用于header，footer，或者一些固定的悬浮div，随滚动条滚动又稳定又流畅，比JS好多了。fixed可以有很多创造性的布局和作用，兼容性是问题。</li>
<li>position：inherit。规定从父类继承position属性的值，所以这个属性也是有继承性的。</li>
</ol>


<h3>float</h3>

<ol>
<li>float属性取值：none(默认)、left、right、inherit。</li>
<li>float：left(或right)，向左（或右）浮动，直到它的边缘碰到包含框或另一个浮动框为止。且脱离普通的文档流，会被正常文档流内的块框忽略。不占据空间，无法将父类元素撑开。</li>
<li>任何元素都可以浮动，浮动元素会生成一个块级框，不论它本身是何种元素。因此，没有必要为浮动元素设置display：block。</li>
<li>如果浮动非替换元素，则要指定一个明确的width，否则它们会尽可能的窄。（什么叫替换元素？根据元素本身的特点定义的， (X)HTML中的img、input、textarea、select、object都是替换元素，这些元素都没有实际的内容。 (X)HTML 的大多数元素是不可替换元素，他们将内容直接告诉浏览器，将其显示出来。）</li>
</ol>


<h4>清浮</h4>

<ol>
<li>最直接的clear属性，该属性表示的是框的哪边不应该挨着浮动框。这个属性是对元素本身而言，通过自动为该元素增加上外边距实现的（css1和css2），或者在上外边距之上增加清除空间，而外边距本身不改变的方式（css2.1）。clear的缺陷是可能要添加额外无意义的标签。</li>
<li>通过父类的浮动也可以清理子类浮动，将空间撑开。这有点像负负得正。但原理应该是浮动的元素也是按照文档流的方式布局，只不过它们是另外一个独立的文档流，不同于普通文档流，暂时叫它浮动文档流？</li>
<li>hasLayout和BFC都可以清理浮动。overflow：hidden；zoom:1；hasLayout跟BFC不同之处，前者被限制为一个矩形，可以设置宽高，但BFC不一定可以设置宽高（比如行内元素）。</li>
</ol>


<h3>display</h3>

<ol>
<li>display属性取值：none、inline、inline-block、block、table相关属性值、inherit以及list-item, run-in等</li>
<li>display属性规定元素应该生成的框的类型。文档内任何元素都是框，块框或行内框。</li>
<li>display：none和visiability：hidden都可以隐藏div，区别有点像absolute和relative，前者不占据文档的空间，后者还是占据文档的位置。</li>
<li>display：inline和block，又叫行内元素和块级元素。表现出来的区别就是block独占一行，在浏览器中通常垂直布局，可以用margin来控制块级元素之间的间距（存在margin合并的问题，就是@ 寒冬winter 磨叽的margin collapse么- &ndash;||，插一句， 只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。）；而inline以水平方式布局，垂直方向的margin和padding都是无效的，大小跟内容一样，且无法设置宽高。inline就像塑料袋，内容怎么样，就长得怎么样；block就像盒子，有固定的宽和高。</li>
<li>inline-block就介于两者之间。inline-block行内块元素。内容被格式化为块元素，而元素本身是一个行内元素。可以设置宽高，又默认不换行特性。IE表现出来的效果不一样，所以需要激发hasLayout，所以就产生了这么一串代码{display:inline-block;<em>display:inline; </em>zoom:1;}。但是不一定要这么累赘，因为还有其他值也可以激发hasLayout，比如height/width。inline-block跟float可以达到同样的布局效果。效果哪个好不好说，前者不会打破文档正常的定位机制，后者就脱离了正常的文档流。完全看具体布局情况选择。另外，激发hasLayout之后的并且设置display：inline的元素，跟普通文字一样按水平方向排列，受vertical-align的影响，并且可以按照容器大小自适应调整。</li>
<li>table相关的属性值可以用来垂直居中，效果一般。</li>
</ol>


<h3>定位机制</h3>

<ol>
<li>上面三个属性都属于CSS定位属性。CSS三种基本的定位机制：普通流、浮动、绝对定位。</li>
</ol>


<h4>随便扯一些居中布局：</h4>

<ul>
<li>宽高固定可以利用负margin。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.center{top：50%;margin-top:-height/2;left:50%;margin-left:-width/2;}</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>宽高不固定的元素。.center{display：inline-block},父类设置{text-align:center}</p></li>
<li><p>垂直居中table-cell不说了</p></li>
<li><p>{line-height：height;vertical-align:middle;}</p></li>
<li><p>{position:absolute;top:0;bottom:0;margin:auto}别忘记给父类定位{position:relative;}</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[去做，才有困难可言]]></title>
    <link href="http://CoffeeXu.github.io/blog/2013/10/27/just-do-it"/>
    <updated>2013-10-27T15:39:00+08:00</updated>
    <id>http://CoffeeXu.github.io/blog/2013/10/27/just-do-it</id>
    <content type="html"><![CDATA[<p>tags: <code>梦想清单</code></p>

<br>


<p>花了十个月，才完成了原来在连客上写下的清单(其实Evernote里还有好多个清单)</p>

<p><img src="http://CoffeeXu.github.io/images/blog/20131027.jpg"></p>

<p>好像也不知道做完了有什么意义，也很难感受当时写下这些想要去做的心情。就好像我一直不能理解小时候说长大要当作家的心情是一样一样的。</p>

<h4>买一台MAC</h4>

<p>现在的笔记本是五月底买的，给自己当作六一儿童节的礼物。以前的联想就被丢在家里积灰尘，很多大学时期的东西就跟过气的笔记本一样被闲置。说来也奇怪，明明有时候好像是那么念旧的一个人，很多有用没用的东西总是舍不得丢掉，很多过去的人和事总是有一岔没一岔的想起，但是又会在应该柔软的时候，gin得跟什么一样。像从来没有回访过母校，我也就在每次路过严分的时候，会呵呵下；或者看到工大校庆的各种转发，打个已阅的标签。</p>

<p>其实现在也很少开电脑了，下了班也很少再有心情去码代码。苹果系统感觉还没有用得很顺，所以也没有体会到效率的提高。好吧，压根就没有在码代码，提高毛线啊。</p>

<h4>养一只叫&#8221;萌萌&#8221;的猫</h4>

<p>从别人那里领养来一只小母喵，两三个月大的家猫，黑不溜秋的，被好多人嫌弃，小能一直强调“丑哭了！”，但是我还是觉得挺不错的呀，小喵都挺萌的，不过名字没有叫萌萌，花花小八土豆，都是别人取的，反正现在叫什么她都是不会应和的，一直沉浸在自己的世界里发神经！真的是特别神经。不知道是不是小时候都这样皮，到长大了就好点了吧懒懒的了。我不是很有耐心的人，老是烦我我就会教训她，她就会有点害怕我，但晚上还是会在我门口喵喵地叫，求我放她进来睡觉。可是我多无情的人啊，不管她。小时候还是要教好，不能养成恶习。白天还是开着门让她跑来跑去发神经。教了两次已经会上厕所，表扬一下。</p>

<p>我还是希望可以把她养得胖胖的，周末可以坐在我腿上晒太阳，看我上网矫情。</p>

<p>养猫还是一件麻烦的事情，因为对她做什么她都是不会领情的。我是独立的，她也是独立的。我对她抚摸她根本就没有在享受，我表扬她大概她也感受不到吧。我在想我养她长大，我们彼此会有感情吗？</p>

<h4>去北京，旅行</h4>

<p>呵呵。<a href="http://CoffeeXu.github.io/blog/2013/10/23/travel-to-beijing">带着痘痘来北京看人头</a></p>

<p>所以所有这些，都被我当作体验，感受过就好了吧，没什么不同的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[带着痘痘来北京看人头]]></title>
    <link href="http://CoffeeXu.github.io/blog/2013/10/23/travel-to-beijing"/>
    <updated>2013-10-23T20:32:00+08:00</updated>
    <id>http://CoffeeXu.github.io/blog/2013/10/23/travel-to-beijing</id>
    <content type="html"><![CDATA[<p>tags: <code>梦想清单</code> <code>旅行</code></p>

<br>


<p>本来十一要去稻城，房间太贵，便宜的都定完了，穷人一枚住不起就算了，想说安心回家看中医治疗痘痘去。</p>

<p>但是内心始终不甘心啊，这么长的假期宅在家里不出去玩，以后都没有机会了。而且毕业旅行也是一直都欠着。</p>

<p>but！30号的时候，看到3号飞天津的打折机票只要390不到点，北京情节就来了，说赶紧的看看房间，能订到房就去北京。</p>

<p>好巧不巧的看到豆瓣上一家所谓的北京民宿，随口问了下居然有房间。直接就头脑发热定下了，不能退房，后来一直担心房间会不会不安全，搞的来北京就一直怕怕的。最后定了7号晚上返程的高铁。</p>

<p>在自己的房间浑浑噩噩混过了1号2号，2号晚上老早就洗头洗澡睡觉，第二天四五点爬起来赶飞机。第一次坐飞机，激动死了，还好巧不巧的在窗边，可以看看云层以上的天空啦。最后发现，这趟北京之旅唯一的收获就是坐飞机，这是后话。</p>

<p>腾云驾雾的感觉，好开森！我说那是《楚门的世界》里的边际嘛，有一扇门，可以通往真相。</p>

<p><img src="http://CoffeeXu.github.io/images/blog/20131023_0.jpg"></p>

<p>那边就是海了。那个小岛可能是台湾。</p>

<p><img src="http://CoffeeXu.github.io/images/blog/20131023_1.jpg"></p>

<p>到了天津，转城际动车去北京。临时买票，到北京在西单附近，我观望了下，人的确是有点多，随便走了走我就去订好的民宿。</p>

<p>安顿好之后，第一个晚上我就就近逛逛，也没想说去哪里玩。</p>

<p>其实这次来北京已经是我出来玩，安排最充分的一次了，来往的车程和住宿都安排好了。虽然没有细具到每一天去哪些景点，我也不想要细具到这种细枝末节。我写了下大概想要去的地方，至于到底个什么安排，就全部随机了。导致我最后大概就去了总和的1/3，一来是因为一到北京就重感冒了身体不适，二来是累。好吧，还是因为身体不适。</p>

<p>第二天(4号)去了中关村，北京大学，颐和园。</p>

<p>第三天(5号)去了天安门，故宫，王府井，前门大街。</p>

<p>第四天(6号)去了798，跟MC见面吃饭，匆匆赶车去了。</p>

<p>颐和园的鸭子，为了看它，还做坑爹的船，所谓的游湖。</p>

<p><img src="http://CoffeeXu.github.io/images/blog/20131023_2.jpg"></p>

<p>到处卖的北京老酸奶。好像没什么特别的味道。反正我鼻塞喝不出来。咦，我好像把瓶子买回来了，也不知道带回来没有。</p>

<p><img src="http://CoffeeXu.github.io/images/blog/20131023_3.jpg"></p>

<p>他们说抹茶味超级浓郁的甜筒。我还是没有吃出什么味道，QAQ</p>

<p><img src="http://CoffeeXu.github.io/images/blog/20131023_4.jpg"></p>

<p>没有人喜欢一个人孤孤单单的，我也不希望自己真的孤独终老。但是还是要做好一个人的准备。我去北京就好多人问我说，“不会吧，你一个人去啊！”我也不希望，永远都是一个人，去旅行。</p>

<p>虽然，一个人旅行没什么不好呀。</p>

<p>大不了，就是上厕所的时候，没人看包。必须要大包小包拎厕所里。</p>

<p>大不了，就是麦当劳吃饭忘了拿吸管，又没有人看着位置，只能掀盖子随便喝。</p>

<p>大不了，就是进一家饭店，点一个菜只能一个人吃。服务员还同情地看着一桌只有一个顾客的女屌丝</p>

<p><img src="http://CoffeeXu.github.io/images/blog/20131023_5.jpg"></p>

<p>关于吃，我吃最多的还是小区门口的小摊贩，羊杂碎羊肉串粉丝砂锅炒粉干煎饼之类的，感冒好像胃口也不好。</p>

<p>去故宫租的讲解器，被它绕晕了，我好蠢。单身狗就是这样的。</p>

<p><img src="http://CoffeeXu.github.io/images/blog/20131023_6.jpg"></p>

<p>798里的为艺术北漂的人们真是为他们感到心酸啊，可是他们有梦想。呵呵</p>

<p><img src="http://CoffeeXu.github.io/images/blog/20131023_7.jpg"></p>

<p><img src="http://CoffeeXu.github.io/images/blog/20131023_8.jpg"></p>

<p><img src="http://CoffeeXu.github.io/images/blog/20131023_9.jpg"></p>

<p>没有爬长城，没有看升旗。其实我对自己说，只要我到了北京，我就是了了心愿。我感受到了北京的毒气，就够了。我就是看一看，看一看就够了啊。</p>

<p>有些事情，去做，就已经是成功了呢，不管最后体验到了什么。</p>

<p>困难一定会是有的，但是去做了，才知道困难是什么，想象出来的都不靠谱的。</p>

<p>在北京，遇到好人，也遇到不好的人，没有遇到坏人，已经是很幸运的事情了啊。</p>

<br>


<p>本来定的是7号晚上的高铁，好在刚到北京第一天我觉得说北京没什么好玩的，加之所谓的民宿还是不怎么踏实，叫大娘帮忙看看提早回杭州，结果就好巧不巧杭州7号台风，半个城都瘫痪了，我还好早一天回，7号在房间窝了一天，管人家涨大水撑船的。但6号那天的机票也是担心了我很久，怕受台风影响，在半路停不下来了。也的确，航班延误了大概半个小时，快到杭州的时候，还像开在贫困山区的道路上一样颠簸了5分钟。</p>

<br>


<br>


<p>最后不管怎么说，去做就好了，不要考虑说有什么意义。我想去，已经是最大的理由了吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[外边距合并的其中一种]]></title>
    <link href="http://CoffeeXu.github.io/blog/2013/10/21/collapsing-margins"/>
    <updated>2013-10-21T20:31:00+08:00</updated>
    <id>http://CoffeeXu.github.io/blog/2013/10/21/collapsing-margins</id>
    <content type="html"><![CDATA[<p>tags: <code>外边距合并</code> <code>collapsing margins</code></p>

<br>


<p>群里的一位同学遇到的问题：<a href="http://jsbin.com/OdEyoh/3/edit">JSBin</a></p>

<p>原本是一个居中的问题，为什么position修改为<code>relative</code>就不能居中了呢？</p>

<p>因为这里莫名其妙地满足了外边距合并的情况：</p>

<ul>
<li><p>普通文档流的块级元素；</p></li>
<li><p>且一个元素包含在另一个元素中，没有<code>内边距</code>或<code>边框</code>把外边距分隔开。所以它们的上和/或下外边距发生了合并。所以麻烦都转移到父元素a上了。</p></li>
</ul>


<p>解决办法：</p>

<ul>
<li>使其中一个元素，变为<code>非</code>普通文档流中的块级元素，例如变为浮动元素(float)｜脱离文档流(position)｜内联元素(inline-block);</li>
<li>设置padding和border分开两个元素的外边距。(父元素上设置。子元素设置，还是没有把两个的margin分开好嘛)</li>
<li>父元素添加<code>overflow:hidden;</code></li>
</ul>


<p>一定要拜读的资料<a href="http://www.w3school.com.cn/css/css_margin_collapsing.asp">w3school-CSS 外边距合并</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[爱整理的都是好姑凉]]></title>
    <link href="http://CoffeeXu.github.io/blog/2013/10/15/handbook"/>
    <updated>2013-10-15T20:20:00+08:00</updated>
    <id>http://CoffeeXu.github.io/blog/2013/10/15/handbook</id>
    <content type="html"><![CDATA[<p>tags: <code>手册</code></p>

<br>


<h3>开始装b</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["title"]
</span><span class='line'>rake generate
</span><span class='line'>rake deploy
</span><span class='line'>
</span><span class='line'>git add .
</span><span class='line'>git commit -m "Some comment here." 
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<h3>先睹为快</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake preview
</span><span class='line'># ctrl + c 退出预览</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript: 函数调用模式]]></title>
    <link href="http://CoffeeXu.github.io/blog/2013/10/15/javascript-function-invocation-patterns"/>
    <updated>2013-10-15T19:38:00+08:00</updated>
    <id>http://CoffeeXu.github.io/blog/2013/10/15/javascript-function-invocation-patterns</id>
    <content type="html"><![CDATA[<p>tags: <code>JavaScript</code> <code>this</code> <code>翻译</code></p>

<br>


<p>JavaScript被描述为一个面向函数语言（有别于面向对象的语言）。因为函数在JavaScript中不仅仅是独立的逻辑执行单元，函数是一等公民，它也提供作用域，且能创建对象。如此依赖函数有好有坏：好的是它使的语言轻且快速（也是该语言发展的初衷），坏的是如果你不知道你在做什么，你很容易把自己绕进去。</p>

<p>JavaScript函数一个需要关心的问题是，不同的调用模式可以产生截然不同的结果。这篇文章介绍了四种模式，如何使用它们，要注意些什么。四种调用模式如下：</p>

<p>1、方法调用（Method Invocation）</p>

<p>2、函数调用（Function Invocation）</p>

<p>3、构造函数调用（Constructor Invocation）</p>

<p>4、apply和call调用（Apply And Call Invocation）</p>

<h2>函数执行</h2>

<p>Javascript（像现今所有语言）函数有逻辑模块化的功能，它可以在执行的任何时候被调用。调用函数时，暂停执行当前函数，传递控制和参数给被调用的函数。此外，this参数也被传递给函数。调用操作符是一对圆括号（） ，它可以包含0个或多个以逗号分隔的表达式。</p>

<p>不幸的是，有多种模式可用来调用函数。这些模式并不是nice-to-know：绝对有必要了解它们。因为不同模式调用函数可以产生截然不同的结果。我认为这是JavaScript在语言设计上的错误，如果设计语言时多些思考（少些匆忙），也不会产生这么大的问题。</p>

<h2>四种调用模式</h2>

<p>虽然只有一个调用操作符（），但有四种调用模式。每种模式在初始化this参数时有所不同。</p>

<h3>方法调用</h3>

<p>对象中的函数，称为方法。方法调用是调用对象中的函数的模式。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">increment</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">increment</span><span class="p">();</span> <span class="c1">//Method invocation</span>
</span></code></pre></td></tr></table></div></figure>


<p>若函数前面有对象实例object，则称为方法调用。JavaScript将this参数指向调用方法的对象。如上例，this指向obj。Javascript在执行时绑定this（也被称为晚绑定）。</p>

<h3>函数调用</h3>

<p>使用（）调用函数，称为函数调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span> <span class="c1">//5</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用函数调用模式，this指向全局对象。这是JavaScript语言中的错误！盲目绑定this到全局对象会破坏当前上下文。尤其是在方法函数内使用<code>内部函数</code>。下面这个例子做了很好地解释：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span> <span class="c1">//Global variable</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">increment</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">innerFunction</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">innerFunction</span><span class="p">();</span> <span class="c1">//Function invocation pattern</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">increment</span><span class="p">();</span> <span class="c1">//Method invocation pattern</span>
</span></code></pre></td></tr></table></div></figure>


<p>你认为屏幕上显示什么？答案是1的，不好意思你错了（但不要太为难自己，这是JavaScript没有处理好）。真正的答案是500。注意，innerFunction使用函数调用模式，因此this被设置为全局对象。结果就是innerFunction（再次强调，它是函数调用模式）没有指向当前对象的this参数。相反，它（this）被设置到全局对象，其value值被定义为500。我要强调，这是很糟糕的语言设计；增量函数采用方法调用模式来调用，很自然地认为在内部使用它时，this应该总是指向当前函数。</p>

<p>有一个简单的方法来避开这个问题，但在我看来是一种hack。在函数内部定义一个变量（按照惯例，命名为that），将this赋值给这个变量。（题外话：这种方式可行使因为JavaScript中的函数是闭包）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span> <span class="c1">//Global variable</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">increment</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">that</span><span class="p">.</span><span class="nx">value</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">innerFunction</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">alert</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">innerFunction</span><span class="p">();</span> <span class="c1">//Function invocation pattern</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">increment</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果this可以绑定到调用的当前对象作用域，函数和方法调用是一样的。</p>

<h3>构造函数调用</h3>

<p>注意：这是JavaScript另一个特点！JavaScript不是class式面向对象的语言。相反，它是一个propertype式面向对象的语言，但JavaScript的创建者认为，熟悉传统的面向对象经验的人（绝大多数）可能对纯粹的原型形式不满。这导致JavaScript对其原型特征不确定，最糟糕的事情发生了：它混合了经典的面向对象的语法和自身原型性质。结果：一塌糊涂！</p>

<p>传统的面向对象，对象是类的实例。在C++和Java中，这个实例是通过使用new操作符生成。这似乎是构造函数调用模式背后的灵感&hellip;</p>

<p>构造函数调用模式是，在被调用的函数之前用new操作符。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Cheese</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">cheeseType</span> <span class="o">=</span> <span class="nx">type</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">cheeseType</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">cheddar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Cheese</span><span class="p">(</span><span class="s2">&quot;cheddar&quot;</span><span class="p">);</span> <span class="c1">//new object returned, not the type.</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然Cheese是一个函数对象（有人将函数作为运行模块化的代码块），通过调用带new关键字的函数，来创建一个新的对象。this参数将指向新创建的对象，而函数的return操作符，will have its behaviour altered。关于构造函数调用的return操作符行为有两种情况：</p>

<p>1、如果该函数返回一个简单类型（number, string, boolean, null or undefined），忽略return，返回this（指向新的对象）。
2、如果该函数返回一个object实例（简单类型以外的任何类型），那么将返回的对象，而不是返回this。这种模式是不经常使用，但当它与闭包相结合的时候非常有用。</p>

<p>例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">data</span> <span class="o">:</span> <span class="s2">&quot;Hello World&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Func1</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">obj</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Func2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;I am a simple type&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">f1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Func1</span><span class="p">();</span> <span class="c1">//f1 is set to obj</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">f2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Func2</span><span class="p">();</span> <span class="c1">//f2 is set to a new object</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可能会忽略JavaScript创建者给予该语言的独特之处：利用任意原型链创建对象，而只使用对象字面量来创建对象。这种模式很直观但也存在潜在问题。不过可以通过扩展对象的创建方法，实现构造函数调用模式的方法，<a href="http://doctrina.org/JavaScript:Why-Understanding-Scope-And-Closures-Matter.html#closureandconstructor">例子</a>。JavaScript 1.8.5实现了Object.create。构造函数调用仍然频繁使用。</p>

<h3>apply和call调用</h3>

<p>apply模式相比之前的模式，没有那么糟糕。apply方法允许，通过传递参数数组给函数来手动调用函数，明确设置this参数。因为函数是一等公民，他们也是对象，因此也可以运行方法（函数）。事实上，每一个function都指向Function.prototype,因此方法可以很容易扩展函数。apply方法就是一个函数扩展方法-我的猜想-它定义在Function.prototype中。</p>

<p>apply有两个参数：第一个参数是this参数绑定的对象，第二个参数是一个数组，它被映射为第一个对象的参数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">num1</span><span class="p">,</span> <span class="nx">num2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">num1</span><span class="o">+</span><span class="nx">num2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'><span class="nx">add</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">array</span><span class="p">);</span> <span class="c1">//7</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的例子中，this为空（该函数不是一个对象，所以它不需要）和数组为num1与num2。第一个参数可以更有趣：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">data</span><span class="o">:</span><span class="s1">&#39;Hello World&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">displayData</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">displayData</span><span class="p">();</span> <span class="c1">//undefined</span>
</span><span class='line'><span class="nx">displayData</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">//Hello World</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的例子使用apply绑定this到obj。结果产生一个this.data值。apply的实际应用价值,就是能明确分配一个值给this.。要是没有这个功能，我们可以直接使用（）来调用函数。</p>

<p>JavaScript还有种调用方法是call，类似apply方法,不过它传递的不是一个参数数组,而是一个参数列表。如果JavaScript可以实现的函数重载，我认为call应该是apply方法的重载。因此，人们谈论的apply和call其实是一样的。</p>

<h2>结论</h2>

<p>无论好坏，JavaScript都已经流行了。了解语言的特征,并避免这种特性带来的异常非常重要。学习四种函数调用方法哪里不同，以及如何避免缺陷是使用JavaScript的基础。</p>

<p>原文：<a href="http://doctrina.org/Javascript-Function-Invocation-Patterns.html">http://doctrina.org/Javascript-Function-Invocation-Patterns.html</a></p>

<h2>废话在后</h2>

<p>总结下this.</p>

<ol>
<li><p>对于obj.fun()此类方法函数调用,哪个<code>对象实例</code>(obj)调用this所在的函数(fun),this指向那个<code>对象实例</code></p></li>
<li><p>对于函数调用,this指向全局对象.(其实可以看做上一种,是window对象的方法函数,全局对象调用,则指向全局对象).避免这种语言设计不合理的一个小技巧就是,进入函数后就申明一个变量<em>this,赋值this给它(</em>this),保存下来.</p></li>
<li><p>对于构造函数调用,若该函数返回一个简单类型（number, string, boolean, null or undefined），忽略return值，返回this（指向新的对象）;如果该函数返回一个object实例（简单类型以外的任何类型），那么将返回该对象。</p></li>
<li><p>apply和call调用,this指向apply和call第一参数.即手动设置this的值.</p></li>
</ol>


<p>10 months ago 完.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[好像没有然后了]]></title>
    <link href="http://CoffeeXu.github.io/blog/2013/10/12/no-longer"/>
    <updated>2013-10-12T21:51:00+08:00</updated>
    <id>http://CoffeeXu.github.io/blog/2013/10/12/no-longer</id>
    <content type="html"><![CDATA[<p>tags: <code>随便</code></p>

<br>


<p>到目前，处理完字体，样式，分享，评论，百度统计，感觉又没有那么又激情了。感觉没有事情可做。</p>

<p>所以又是三分钟热度吗？</p>

<p>本来为了走向国际，或者学英语之类的，应该来个全英文的博客网站，至少导航和分类应该要国际化。但是，还是觉得文字对我有更多的吸引力。</p>

<p>目前准备了三个目录：</p>

<ul>
<li><p><a href="http://CoffeeXu.github.io/blog/categories/ha-lou-!nu-yi-zhi/">哈喽！女汉纸</a></p></li>
<li><p><a href="http://CoffeeXu.github.io/blog/categories/lai-lai-lai-he-wan-zhe-bei-huan-you-san-bei/">来来来喝完这杯还有三杯</a></p></li>
<li><p><a href="http://CoffeeXu.github.io/blog/categories/2046/">2046</a></p></li>
</ul>


<p>最后一个目录还没开始写。这么聪明的你们知道每个目录啥玩意嘛哈哈哈！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Again!Octopress]]></title>
    <link href="http://CoffeeXu.github.io/blog/2013/10/10/hello-again-octopress"/>
    <updated>2013-10-10T20:45:00+08:00</updated>
    <id>http://CoffeeXu.github.io/blog/2013/10/10/hello-again-octopress</id>
    <content type="html"><![CDATA[<p>tags: <code>折腾</code> <code>octopress</code></p>

<br>


<p>这是第一次在mac上折腾Octopress, 对于我这种数码/IT杀手来说， 跟win一样麻烦。</p>

<p>但成就感暴涨。尤其是<a href="http://summer222522.github.io/">茂茂</a>赞助了各种美好的<a href="https://github.com/imathis/octopress">主题</a>后，更加激动兴奋了！！</p>

<p>哈哈，最喜欢折腾了！<code>折腾无止境</code>！</p>

<p>但是折腾完之后，不知道可以坚持纪录多久的博客，求监督。</p>

<p>接下来， 正式总结此次折腾遇到的麻烦。</p>

<h3>坑</h3>

<ul>
<li>安装ruby——鉴于我手欠，早先删除了1个多G的Xcode，整个安装过程异常困难。由于我一直想要尝试用<a href="https://github.com/kennethreitz/osx-gcc-installer">戳工具</a>来代替这个鸡肋的Xcode。毕竟，任何无用却占据大量空间的东西都使我感到无比难过。我觉得哪天<code>猴年马月</code>一定要替换过来。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -L https://get.rvm.io | bash -s stable --ruby
</span><span class='line'>rvm install 1.9.3
</span><span class='line'>rvm use 1.9.3
</span><span class='line'>rvm rubygems latest</span></code></pre></td></tr></table></div></figure>


<ul>
<li>安装Octopress——安装依赖时，<code>rbenv rehash</code>总是提示没有这个命令。所以安装依赖的过程重复了好几次。最后<code>重启</code>，开<code>GoAgentX</code>，成功了。至于哪个原因造成的，我也不十分明了，有同样问题的可以参考<a href="http://liuyix.org/blog/2013/mac-install-octopress/">Mac上安装octopress</a>。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress    # If you use RVM, You'll be asked if you trust the .rvmrc file (say yes).
</span><span class='line'>ruby --version  # Should report Ruby 1.9.3
</span><span class='line'>gem install bundler
</span><span class='line'>rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
</span><span class='line'>bundle install
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<ul>
<li>将博客部署到GitHub上——像我这种MAC小白，以为在终端输入代码，没有红色就算是成功，第一步执行完居然默默地隐藏着设置用户名和邮箱，就是github帐户的用户名和密码。这里要提示一下，目前github已经修改为<code>username.github.io</code>，写<code>.com</code>有什么问题呢？因为输入url的提示已经更新了，我一开始仓库名写的是<code>coffeexu.girhub.com</code>，提示里是</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git@github.com:CoffeeXu/coffeexu.github.io.git
</span><span class='line'>or https://github.com/username/username.github.io.git</span></code></pre></td></tr></table></div></figure>


<p>显然我个猪头一来没粘贴仓库右下角的URL码，二来直接就将用户名改成了自己的名字。所以一直提示没有这个仓库。</p>

<p>如果使用的是ssh形式的url，需要得到当前笔记本用户的ssh，好像上面配置的时候会自动生产，如果需要手动添加的，戳<a href="https://help.github.com/articles/generating-ssh-keys">Generating SSH Keys</a>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages
</span><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>不知道你们是怎么样，反正我的<code>rake deploy</code>是没有提交到github上，大概是我前面重复太多遍了，一直提示有冲突。肿么办呢？强制合并，手动提交。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd _deploy
</span><span class='line'>git add .
</span><span class='line'>git commit -m '手动提交_deploy'
</span><span class='line'>git push origin master</span></code></pre></td></tr></table></div></figure>


<h3>DIY</h3>

<ul>
<li><code>rake preview</code>如果木有在线的markdown预览的话，这个是写文章和修改主题时好方法啊，开起来之后，即时修改即时刷新就可以预览效果。</li>
<li>超链接。有没有发现我文章内的连接是打开新窗口的呢，markdown目前应该还不支持这种语法的，当然markdown是支持html。来自己动动手操作下。<a href="https://gist.github.com/azone/4523641">戳</a></li>
<li>目前的主题，自然是自己做过修改啦！自己动手，丰衣足食。哈哈。设置css样式基本在<code>sass/parts</code>目录下</li>
<li>文本上下间距。嫌弃默认的间距实在是太大了，改了下。文件同上</li>
<li>本来添加了加网和友言的评论，觉得太山寨了，档次一下就low了，删掉了。目前使用的addthis的分享和多说的评论。addthis不能分享到微信，缺陷。所以可能还是尽量使用国内的玩意儿更加符合国情吧。</li>
<li>tips.可以的话还是尽量看官方文档。当然最方便的就是——不要搞了啊！！！</li>
</ul>

]]></content>
  </entry>
  
</feed>
