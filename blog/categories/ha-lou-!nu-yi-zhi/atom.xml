<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 哈喽！女汉纸 | 所以。]]></title>
  <link href="http://CoffeeXu.github.io/blog/categories/ha-lou-!nu-yi-zhi/atom.xml" rel="self"/>
  <link href="http://CoffeeXu.github.io/"/>
  <updated>2014-08-14T17:59:20+08:00</updated>
  <id>http://CoffeeXu.github.io/</id>
  <author>
    <name><![CDATA[许嘘嘘]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript 的核心，闭包和作用域]]></title>
    <link href="http://CoffeeXu.github.io/blog/2014/02/01/soyouthinkyouknowjavascrip"/>
    <updated>2014-02-01T14:22:00+08:00</updated>
    <id>http://CoffeeXu.github.io/blog/2014/02/01/soyouthinkyouknowjavascrip</id>
    <content type="html"><![CDATA[<p>tags: <code>闭包</code> <code>作用域</code></p>

<br>


<p>这篇文章源于<a href="http://e.weibo.com/jobbole?ref=http%3A%2F%2Fweibo.com%2F1581992285%2Fprofile%3Ftopnav%3D1%26wvr%3D5%231354965989570">@伯乐在线官方微博</a>一篇文章,<a href="http://blog.jobbole.com/30468/">测试：你自认为理解了JavaScript？</a>,原文链接这篇文章有给出.主要下面五段小代码.</p>

<p>```javascript</p>

<pre><code>if (!("a" in window)) {
    var a = 1;
}
alert(a);
</code></pre>

<p><code>
</code>javascript</p>

<pre><code>var a = 1,
    b = function a(x) {
        x &amp;&amp; a(--x);
    };
alert(a);
</code></pre>

<p><code>
</code>javascript</p>

<pre><code>function a(x) {
    return x * 2;
}
var a;
alert(a);
</code></pre>

<p><code>
</code>javascript</p>

<pre><code>function b(x, y, a) {
    arguments[2] = 10;
    alert(a);
}
b(1, 2, 3);
</code></pre>

<p><code>
</code>javascript</p>

<pre><code>function a() {
    alert(this);
}
a.call(null);
</code></pre>

<p>```</p>

<p>参考答案(在chrome下弹出的结果,别的木有测试过):</p>

<blockquote><p>undefined,</p>

<p>1,</p>

<p>function a(x) { return x * 2; },</p>

<p>10,</p>

<p>window</p></blockquote>

<h3>下面是我的理解,以及用于理解而参考的一些资料:</h3>

<h4>题目1</h4>

<p>```javascript</p>

<pre><code>if (!("a" in window)) {
    var a = 1;
}
alert(a);
</code></pre>

<p>```
1.  变量申明先压入栈,即顶置变量申明.var a = 1;分为变量申明和变量赋值&mdash;var a; a = 1;执行的时候才进行赋值,所以"a" in window为true,没有对a赋值,所以弹出undefined,而非报错.
2.  我多嘴说一句,if是不区分作用域的.JS中并不是{}区分变量作用范围,而是函数.</p>

<h4>题目2</h4>

<p>```javascript</p>

<pre><code>var a = 1,
    b = function a(x) {
        x &amp;&amp; a(--x);
    };
alert(a);
</code></pre>

<p>```
我认为很简单,a(x)只是一个代号而已,不是变量,所以跟var a = 1一点关系没有,它可以是b(x),c(x).弹出的a始终为1.</p>

<p>如果把b改成a就不一样了.</p>

<h4>题目3</h4>

<p>```javascript</p>

<pre><code>function a(x) {
    return x * 2;
}
var a;
alert(a);
</code></pre>

<p>```
函数申明,然后是变量申明.由于变量没有赋值,那a没有被覆盖.输出的是函数体.JS中变量是随时可以被改变,但这应该局限于执行的时候.</p>

<h4>题目4</h4>

<p>```javascript</p>

<pre><code>function b(x, y, a) {
    arguments[2] = 10;
    alert(a);
}
b(1, 2, 3);
</code></pre>

<p>```</p>

<p>arguments[2] = 10;就是改变a了,好像没有什么好解释了.</p>

<h4>题目5</h4>

<p>```javascript</p>

<pre><code>function a() {
    alert(this);
}
a.call(null);
</code></pre>

<p>```</p>

<p>这个翻译过上一次的<a href="http://coffeexu.github.io/blog/2013/10/15/javascript-function-invocation-patterns">文章</a>,好像也很简单.this指向call函数第一个参数(这里为null).根据ECMAScript262规范规定：如果第一个参数传入的对象调用者是null或者undefined的话，call方法将把全局对象（也就是window）作为this的值.</p>

<p>此处再总结下this.</p>

<ol>
<li><p>对于obj.fun()此类方法函数调用,哪个<code>对象实例</code>(obj)调用this所在的函数(fun),this指向那个<code>对象实例</code></p></li>
<li><p>对于函数调用,this指向全局对象.(其实可以看做上一种,是window对象的方法函数,全局对象调用,则指向全局对象)</p></li>
<li><p>对于构造函数调用,若该函数返回一个简单类型（number, string, boolean, null or undefined），忽略return值，返回this（指向新的对象）;如果该函数返回一个object实例（简单类型以外的任何类型），那么将返回该对象。</p></li>
<li><p>apply和call调用,this指向apply和call第一参数.即手动设置this的值.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IE inherited margin bug: form elements and hasLayout]]></title>
    <link href="http://CoffeeXu.github.io/blog/2014/01/04/ie-inherited-margin-bug"/>
    <updated>2014-01-04T13:15:00+08:00</updated>
    <id>http://CoffeeXu.github.io/blog/2014/01/04/ie-inherited-margin-bug</id>
    <content type="html"><![CDATA[<p>tags: <code>IE</code> <code>表单</code> <code>兼容</code></p>

<br>


<p>总是要切换浏览器的“浏览器模式”和“文档模式”，来测试下IE浏览器是否显示正常，这两种模式的排列组合的情况总是搞不清相互有什么关系，先mark下——<br>
<code>浏览器模式</code>影响的是浏览器的版本及IE的条件注释，会影响服务器端对浏览器版本的判断,主要表现在展现，对CSS影响很大。<br>
<code>文档模式</code>影响的是IE的排版引擎，对DOM的渲染会产生影响。</p>

<p>hasLayout这个IE的特有属性已经很熟悉了，平常都是需要激发hasLayout来解决很多渲染的问题，这次遇到一个因为hasLayout=true造成的IE兼容性问题。<br>
问题代码演示：<a href="http://jsbin.com/oZeYOve/1/edit">http://jsbin.com/oZeYOve/1/edit</a> <br>
问题描述：input属性继承了父类的margin值，导致input左边的距离不受控制（事实上右边也会有问题）。也就是说input会继承父类水平方向的margin值，叠加到自身。IE7及以下浏览器会出现这个问题。</p>

<p>但是，出现该bug的前提是父类是一个被激活了hasLayout的元素。该例子中如果去掉div#search-box的width和height，问题可以被修复。或者将form元素包含到div#search-box元素内。但肯定要遇到“臣妾做不到啊”的情况。<br>
解决办法：<br>
1.CSS hack，给input设置margin负值，用来抵消继承下来的父类margin值。<br>
2.删除父类的margin值。<br>
3.取消父类的hasLayout属性。<br>
4.在input元素之前放文本元素，或者label元素，或者任何的行元素。<br>
5.用span元素把input包起来。</p>

<p>另外我其实遇到过另一个奇葩的问题，input的左边距坍塌。浏览器查看样式点来点去的时候，左边距生效，静止的时候，左边距又退回去了！因为项目中这个页面去掉了，也没办法重现，不知道是哪里的起了冲突。还是先mark</p>

<p>参考资料:[1]<a href="http://www.positioniseverything.net/explorer/inherited_margin.html">http://www.positioniseverything.net/explorer/inherited_margin.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[图片的map锚点]]></title>
    <link href="http://CoffeeXu.github.io/blog/2014/01/04/images-map"/>
    <updated>2014-01-04T13:12:00+08:00</updated>
    <id>http://CoffeeXu.github.io/blog/2014/01/04/images-map</id>
    <content type="html"><![CDATA[<p>tags: <code>images</code> <code>map</code></p>

<br>


<p>闲来无事，回答了<a href="http://www.html-js.com/qa/254#answer-551">前端乱炖</a>的问题，关于给图片设置锚点，详细说是给自适应的图片设置锚点。因为图片是自适应的，那么area的 coords属性值还是固定的话，锚点就要错位了，所以自然就想到能不能设置百分比，可是 coords到底能不能设置百分比啊，好麻烦啊。翻资料查资料看英文看到吐血啊。</p>

<p>呐，dreamweaver设置map锚点太方便啦。讲起来第一次实习，做页面，还是在聚光科技，导师给了我一个流程图的页面，让我第二天给他，项目组的成员需要这个页面拿到外面去演示（这个是我后来才知道的）。流程图你们知道嘛，位置都是不规则的，按现在来做，基本就是绝对定位绝对定位绝对定位。<br>
我当时还刚实习，算是真正在做的第一个页面，本来IE下坑就多，我做了一个下午也没有弄好，一小块一小块切图，做了个大概。第二天导师问我怎么样了，我说快好了，他一看，才做了一半，而且位置都没有跟设计稿一样，有偏差。不是普通意义上的有偏差，是明显可以看出箭头和框架导航位置歪掉了。<br>
他说，这样，你这个不要了，重新做，把整个图片切下来，不要像这样一块一块切了，整个图片弄在页面上，头尾还是要的。图片热点你知道的嘛？就用这个把链接接上就好了。<br>
我愣了下，什么图片热点，我不会啊。学学要多久？我说，啊，是什么东西，好像不会诶。<br>
他说，你把图片切好，我教你，很简单。<br>
然后，他把我切好的整张内容区的图片拖到dreamweaver里，下面有个map，他用矩形框，在需要添加链接的图片位置画出了一个矩形，然后把链接地址写上，好了！<br>
他说，接下来还有这些这些这些，你就这样把链接添加到对应的位置。</p>

<p><img src="/images/blog/20140104.jpg"></p>

<p>我摔！这么简单要做什么网页！<br>
然后5分钟弄好给他，他匆匆忙忙传给其他成员，然后他们去出差了。<br></p>

<p>好了好了，继续说coords到底能不能设置百分比。<br>
<a href="http://www.w3.org/TR/html4/struct/objects.html#h-13.6.1">w3c标准</a>这句话——Coordinates are relative to the top, left corner of the object. All values are lengths. All values are separated by commas. <br>
重点是中间那句话，所有的值都是lengths。<br>
HTML为元素指定了三种类型的长度值：Pixels，Length，MultiLength。简单来说，Pixels是指阿拉伯数值表示的是像素值，比如‘50’就是指'50px';Length是指，阿拉伯数值可以是像素值，也可以是百分比。MultiLength可以是Length也可以是相对长度值。</p>

<p>既然可以是百分比，就要考虑百分比的基数是谁。100px的10%，和900px的10%相差不要太多哦。那事实上（什么事实？谁说的事实？只是我测了好几种情况的实验结果），这个百分比计算的数值相对的既不是map的大小，也不是area的大小，也不是img图片的大小。不管你们混乱成什么样，coords始终以100为基准（泪流满面的表情）。就好像直接忽略了百分号‘%’。现实和理想的差距吧。</p>

<p>浏览器和浏览器之间也有差异的，有些解释得好， 有些渲染得差。而且我测试的情况也有所局限，基本就用了矩形这种情况，圆和多边形有自己的特殊地方的话我也不知道。那就找出了这么个<a href="http://home.comcast.net/~urbanjost/IMG/resizeimg3.html">网址</a></p>

<p>整个就是这么个过程，看英文真的好痛苦，要不要学好英语的。而且搜出这么多东西有什么意义嘛？哼哼</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[讲一讲CSS的position/float/display]]></title>
    <link href="http://CoffeeXu.github.io/blog/2013/10/30/css-position-float-display"/>
    <updated>2013-10-30T21:51:00+08:00</updated>
    <id>http://CoffeeXu.github.io/blog/2013/10/30/css-position-float-display</id>
    <content type="html"><![CDATA[<p>tags: <code>CSS</code> <code>position</code> <code>float</code> <code>display</code></p>

<br>


<h3>position</h3>

<ol>
<li><p>position属性取值：static(默认)、relative、absolute、fixed、inherit。</p></li>
<li><p>postision：static；始终处于文档流给予的位置。看起来好像没有用，但它可以快速取消定位，让top，right，bottom，left的值失效。在切换的时候可以尝试这个方法。</p></li>
<li>除了static值，在其他三个值的设置下，z-index才会起作用。（确切地说z-index只在定位元素上有效）</li>
<li>position：relative和absolute都可以用于定位，区别在于前者的div还属于正常的文档流，后者已经是脱离了正常文档流，不占据空间位置，不会将父类撑开。定位原点relative是相对于它在正常流中的默认位置偏移，它原本占据的空间任然保留；absolute相对于第一个position属性值不为static的父类。所以设置了position：absolute，其父类的该属性值要注意，而且overflow：hidden也不能乱设置，因为不属于正常文档流，不会占据父类的高度，也就不会有滚动条。</li>
<li>fixed旧版本IE不支持，却是很有用，定位原点相对于浏览器窗口，而且不能变。常用于header，footer，或者一些固定的悬浮div，随滚动条滚动又稳定又流畅，比JS好多了。fixed可以有很多创造性的布局和作用，兼容性是问题。</li>
<li>position：inherit。规定从父类继承position属性的值，所以这个属性也是有继承性的。</li>
</ol>


<h3>float</h3>

<ol>
<li>float属性取值：none(默认)、left、right、inherit。</li>
<li>float：left(或right)，向左（或右）浮动，直到它的边缘碰到包含框或另一个浮动框为止。且脱离普通的文档流，会被正常文档流内的块框忽略。不占据空间，无法将父类元素撑开。</li>
<li>任何元素都可以浮动，浮动元素会生成一个块级框，不论它本身是何种元素。因此，没有必要为浮动元素设置display：block。</li>
<li>如果浮动非替换元素，则要指定一个明确的width，否则它们会尽可能的窄。（什么叫替换元素？根据元素本身的特点定义的， (X)HTML中的img、input、textarea、select、object都是替换元素，这些元素都没有实际的内容。 (X)HTML 的大多数元素是不可替换元素，他们将内容直接告诉浏览器，将其显示出来。）</li>
</ol>


<h4>清浮</h4>

<ol>
<li>最直接的clear属性，该属性表示的是框的哪边不应该挨着浮动框。这个属性是对元素本身而言，通过自动为该元素增加上外边距实现的（css1和css2），或者在上外边距之上增加清除空间，而外边距本身不改变的方式（css2.1）。clear的缺陷是可能要添加额外无意义的标签。</li>
<li>通过父类的浮动也可以清理子类浮动，将空间撑开。这有点像负负得正。但原理应该是浮动的元素也是按照文档流的方式布局，只不过它们是另外一个独立的文档流，不同于普通文档流，暂时叫它浮动文档流？</li>
<li>hasLayout和BFC都可以清理浮动。overflow：hidden；zoom:1；hasLayout跟BFC不同之处，前者被限制为一个矩形，可以设置宽高，但BFC不一定可以设置宽高（比如行内元素）。</li>
</ol>


<h3>display</h3>

<ol>
<li>display属性取值：none、inline、inline-block、block、table相关属性值、inherit以及list-item, run-in等</li>
<li>display属性规定元素应该生成的框的类型。文档内任何元素都是框，块框或行内框。</li>
<li>display：none和visiability：hidden都可以隐藏div，区别有点像absolute和relative，前者不占据文档的空间，后者还是占据文档的位置。</li>
<li>display：inline和block，又叫行内元素和块级元素。表现出来的区别就是block独占一行，在浏览器中通常垂直布局，可以用margin来控制块级元素之间的间距（存在margin合并的问题，就是@ 寒冬winter 磨叽的margin collapse么- &ndash;||，插一句， 只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。）；而inline以水平方式布局，垂直方向的margin和padding都是无效的，大小跟内容一样，且无法设置宽高。inline就像塑料袋，内容怎么样，就长得怎么样；block就像盒子，有固定的宽和高。</li>
<li>inline-block就介于两者之间。inline-block行内块元素。内容被格式化为块元素，而元素本身是一个行内元素。可以设置宽高，又默认不换行特性。IE表现出来的效果不一样，所以需要激发hasLayout，所以就产生了这么一串代码{display:inline-block;<em>display:inline; </em>zoom:1;}。但是不一定要这么累赘，因为还有其他值也可以激发hasLayout，比如height/width。inline-block跟float可以达到同样的布局效果。效果哪个好不好说，前者不会打破文档正常的定位机制，后者就脱离了正常的文档流。完全看具体布局情况选择。另外，激发hasLayout之后的并且设置display：inline的元素，跟普通文字一样按水平方向排列，受vertical-align的影响，并且可以按照容器大小自适应调整。</li>
<li>table相关的属性值可以用来垂直居中，效果一般。</li>
</ol>


<h3>定位机制</h3>

<ol>
<li>上面三个属性都属于CSS定位属性。CSS三种基本的定位机制：普通流、浮动、绝对定位。</li>
</ol>


<h4>随便扯一些居中布局：</h4>

<ul>
<li>宽高固定可以利用负margin。</li>
</ul>


<p><code>
.center{top：50%;margin-top:-height/2;left:50%;margin-left:-width/2;}
</code></p>

<ul>
<li><p>宽高不固定的元素。.center{display：inline-block},父类设置{text-align:center}</p></li>
<li><p>垂直居中table-cell不说了</p></li>
<li><p>{line-height：height;vertical-align:middle;}</p></li>
<li><p>{position:absolute;top:0;bottom:0;margin:auto}别忘记给父类定位{position:relative;}</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[外边距合并的其中一种]]></title>
    <link href="http://CoffeeXu.github.io/blog/2013/10/21/collapsing-margins"/>
    <updated>2013-10-21T20:31:00+08:00</updated>
    <id>http://CoffeeXu.github.io/blog/2013/10/21/collapsing-margins</id>
    <content type="html"><![CDATA[<p>tags: <code>外边距合并</code> <code>collapsing margins</code></p>

<br>


<p>群里的一位同学遇到的问题：<a href="http://jsbin.com/OdEyoh/3/edit">JSBin</a></p>

<p>原本是一个居中的问题，为什么position修改为<code>relative</code>就不能居中了呢？</p>

<p>因为这里莫名其妙地满足了外边距合并的情况：</p>

<ul>
<li><p>普通文档流的块级元素；</p></li>
<li><p>且一个元素包含在另一个元素中，没有<code>内边距</code>或<code>边框</code>把外边距分隔开。所以它们的上和/或下外边距发生了合并。所以麻烦都转移到父元素a上了。</p></li>
</ul>


<p>解决办法：</p>

<ul>
<li>使其中一个元素，变为<code>非</code>普通文档流中的块级元素，例如变为浮动元素(float)｜脱离文档流(position)｜内联元素(inline-block);</li>
<li>设置padding和border分开两个元素的外边距。(父元素上设置。子元素设置，还是没有把两个的margin分开好嘛)</li>
<li>父元素添加<code>overflow:hidden;</code></li>
</ul>


<p>一定要拜读的资料<a href="http://www.w3school.com.cn/css/css_margin_collapsing.asp">w3school-CSS 外边距合并</a></p>
]]></content>
  </entry>
  
</feed>
